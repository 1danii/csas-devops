/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/automations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List automations */
        get: {
            parameters: {
                query?: {
                    /** @description Page number */
                    page?: components["parameters"]["page"];
                    /** @description Number of items per page */
                    limit?: components["parameters"]["limit"];
                    /** @description Sort field */
                    sort?: components["parameters"]["sort"];
                    /** @description Sort order */
                    order?: components["parameters"]["order"];
                    /** @description To search an array, you can use the search query parameter. Search is a special kind of filter that will look for a partial match in any values (with nesting) in the array. */
                    search?: components["parameters"]["search"];
                    /** @description Filters by equality */
                    id_eq?: string;
                    /** @description Filters by inequality */
                    id_ne?: string;
                    /** @description Filters by partial match using * */
                    id_like?: string;
                    /** @description Filters properties that start with a value */
                    id_start?: string;
                    /** @description Filters properties that end with a value */
                    id_end?: string;
                    /** @description Filters by equality */
                    type_eq?: string;
                    /** @description Filters by inequality */
                    type_ne?: string;
                    /** @description Filters by partial match using * */
                    type_like?: string;
                    /** @description Filters properties that start with a value */
                    type_start?: string;
                    /** @description Filters properties that end with a value */
                    type_end?: string;
                    /** @description Filters by equality */
                    state_eq?: string;
                    /** @description Filters by inequality */
                    state_ne?: string;
                    /** @description Filters by partial match using * */
                    state_like?: string;
                    /** @description Filters properties that start with a value */
                    state_start?: string;
                    /** @description Filters properties that end with a value */
                    state_end?: string;
                    /** @description Filters by equality */
                    last_activity_eq?: string;
                    /** @description Filters by inequality */
                    last_activity_ne?: string;
                    /** @description Filters by partial match using * */
                    last_activity_like?: string;
                    /** @description Filters properties that start with a value */
                    last_activity_start?: string;
                    /** @description Filters properties that end with a value */
                    last_activity_end?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Collection of automation instances response */
                200: {
                    headers: {
                        "X-Total-Count": components["headers"]["X-Total-Count"];
                        "X-Filtered-Count": components["headers"]["X-Filtered-Count"];
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Automation"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/automations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get automation */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the automation */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Automation response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Automation"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/automations/{id}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get automation logs */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the automation */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Collection of automation instance logs */
                200: {
                    headers: {
                        "X-Total-Count": components["headers"]["X-Total-Count"];
                        "X-Filtered-Count": components["headers"]["X-Filtered-Count"];
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AutomationLog"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/automation-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List automation types */
        get: {
            parameters: {
                query?: {
                    /** @description Page number */
                    page?: components["parameters"]["page"];
                    /** @description Number of items per page */
                    limit?: components["parameters"]["limit"];
                    /** @description Sort field */
                    sort?: components["parameters"]["sort"];
                    /** @description Sort order */
                    order?: components["parameters"]["order"];
                    /** @description To search an array, you can use the search query parameter. Search is a special kind of filter that will look for a partial match in any values (with nesting) in the array. */
                    search?: components["parameters"]["search"];
                    /** @description Filters by equality */
                    type_eq?: string;
                    /** @description Filters by inequality */
                    type_ne?: string;
                    /** @description Filters by partial match using * */
                    type_like?: string;
                    /** @description Filters properties that start with a value */
                    type_start?: string;
                    /** @description Filters properties that end with a value */
                    type_end?: string;
                    /** @description Filters by equality */
                    initial_state_eq?: string;
                    /** @description Filters by inequality */
                    initial_state_ne?: string;
                    /** @description Filters by partial match using * */
                    initial_state_like?: string;
                    /** @description Filters properties that start with a value */
                    initial_state_start?: string;
                    /** @description Filters properties that end with a value */
                    initial_state_end?: string;
                    /** @description Filters by equality */
                    end_state_eq?: string;
                    /** @description Filters by inequality */
                    end_state_ne?: string;
                    /** @description Filters by partial match using * */
                    end_state_like?: string;
                    /** @description Filters properties that start with a value */
                    end_state_start?: string;
                    /** @description Filters properties that end with a value */
                    end_state_end?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Collection of automation types response */
                200: {
                    headers: {
                        "X-Total-Count": components["headers"]["X-Total-Count"];
                        "X-Filtered-Count": components["headers"]["X-Filtered-Count"];
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AutomationType"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/automation-types/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get automation type */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The automation type */
                    type: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Automation type response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AutomationType"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List SAS */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Collection of SAS */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SAS"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/runners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List runners */
        get: {
            parameters: {
                query?: {
                    /** @description Page number */
                    page?: components["parameters"]["page"];
                    /** @description Number of items per page */
                    limit?: components["parameters"]["limit"];
                    /** @description Sort field */
                    sort?: components["parameters"]["sort"];
                    /** @description Sort order */
                    order?: components["parameters"]["order"];
                    /** @description To search an array, you can use the search query parameter. Search is a special kind of filter that will look for a partial match in any values (with nesting) in the array. */
                    search?: components["parameters"]["search"];
                    /** @description Filters by equality */
                    runner_group_eq?: string;
                    /** @description Filters by inequality */
                    runner_group_ne?: string;
                    /** @description Filters by partial match using * */
                    runner_group_like?: string;
                    /** @description Filters properties that start with a value */
                    runner_group_start?: string;
                    /** @description Filters properties that end with a value */
                    runner_group_end?: string;
                    /** @description Filters by equality */
                    organization_eq?: string;
                    /** @description Filters by inequality */
                    organization_ne?: string;
                    /** @description Filters by partial match using * */
                    organization_like?: string;
                    /** @description Filters properties that start with a value */
                    organization_start?: string;
                    /** @description Filters properties that end with a value */
                    organization_end?: string;
                    /** @description Filters by equality */
                    state_eq?: string;
                    /** @description Filters by inequality */
                    state_ne?: string;
                    /** @description Filters by partial match using * */
                    state_like?: string;
                    /** @description Filters properties that start with a value */
                    state_start?: string;
                    /** @description Filters properties that end with a value */
                    state_end?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Collection of automation instances response */
                200: {
                    headers: {
                        "X-Total-Count": components["headers"]["X-Total-Count"];
                        "X-Filtered-Count": components["headers"]["X-Filtered-Count"];
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Runner"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/runners/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get runner */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the runner */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Runner response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Runner"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List jobs */
        get: {
            parameters: {
                query?: {
                    /** @description Page number */
                    page?: components["parameters"]["page"];
                    /** @description Number of items per page */
                    limit?: components["parameters"]["limit"];
                    /** @description Sort field */
                    sort?: components["parameters"]["sort"];
                    /** @description Sort order */
                    order?: components["parameters"]["order"];
                    /** @description To search an array, you can use the search query parameter. Search is a special kind of filter that will look for a partial match in any values (with nesting) in the array. */
                    search?: components["parameters"]["search"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Collection of automation instances response */
                200: {
                    headers: {
                        "X-Total-Count": components["headers"]["X-Total-Count"];
                        "X-Filtered-Count": components["headers"]["X-Filtered-Count"];
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Job"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get jobs */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the job */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Job response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Job"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List metrics */
        get: {
            parameters: {
                query?: {
                    /** @description Page number */
                    page?: components["parameters"]["page"];
                    /** @description Number of items per page */
                    limit?: components["parameters"]["limit"];
                    /** @description Sort field */
                    sort?: components["parameters"]["sort"];
                    /** @description Sort order */
                    order?: components["parameters"]["order"];
                    /** @description To search an array, you can use the search query parameter. Search is a special kind of filter that will look for a partial match in any values (with nesting) in the array. */
                    search?: components["parameters"]["search"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Collection of automation instances response */
                200: {
                    headers: {
                        "X-Total-Count": components["headers"]["X-Total-Count"];
                        "X-Filtered-Count": components["headers"]["X-Filtered-Count"];
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MetricWithRunner"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/metrics/{runner}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get metrics by runner */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the runner */
                    runner: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Runner response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MetricWithRunner"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        State: string;
        AutomationTypeId: string;
        Automation: {
            id: string;
            type: components["schemas"]["AutomationTypeId"];
            state: components["schemas"]["State"];
            /** Format: date-time */
            last_activity: string;
        };
        AutomationLog: {
            automation_id: string;
            /** Format: date-time */
            timestamp: string;
            level: string;
            type: components["schemas"]["AutomationTypeId"];
            from_state: components["schemas"]["State"];
            to_state: components["schemas"]["State"];
            description: string;
        };
        AutomationType: {
            type?: components["schemas"]["AutomationTypeId"];
            states?: components["schemas"]["State"][];
            initial_state?: components["schemas"]["State"];
            end_state?: components["schemas"]["State"];
            transitions?: components["schemas"]["Transition"][];
        };
        Transition: {
            from_state?: components["schemas"]["State"];
            to_state?: components["schemas"]["State"];
            event?: string | null;
            action?: string | null;
        };
        SAS: string;
        /** @enum {string} */
        RunnerState: "idle" | "active" | "failed" | "offline";
        Runner: {
            id: string;
            state: components["schemas"]["RunnerState"];
            runner_group: string;
            organization: string;
        };
        Job: {
            id?: string;
            state?: components["schemas"]["RunnerState"];
            organization?: string;
            SAS?: components["schemas"]["SAS"];
            runner?: string;
            /** Format: date-time */
            timestamp?: string;
        };
        Metric: {
            /** Format: float */
            cpu?: number;
            memory?: number;
            network_receive?: number;
            network_transmit?: number;
            fs_reads?: number;
            fs_writes?: number;
        };
        MetricWithRunner: {
            runner?: string;
            metrics?: components["schemas"]["Metric"][];
        };
    };
    responses: never;
    parameters: {
        /** @description Page number */
        page: number;
        /** @description Number of items per page */
        limit: number;
        /** @description Sort field */
        sort: string;
        /** @description Sort order */
        order: "asc" | "desc";
        /** @description To search an array, you can use the search query parameter. Search is a special kind of filter that will look for a partial match in any values (with nesting) in the array. */
        search: string;
    };
    requestBodies: never;
    headers: {
        /** @description total number of items in the bucket */
        "X-Total-Count": number;
        /** @description number of items after filtering (not taking into account pagination) */
        "X-Filtered-Count": number;
    };
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
